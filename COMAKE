#edit-mode: -*- python -*-
#coding:gbk
import os

LUNA_COMPILE_WITHOUT_TEST = bool(os.environ.get('LUNA_COMPILE_WITHOUT_TEST'))

if 'LUNA_ROOT' not in locals():
    LUNA_ROOT='./'

LUNA_TOOLS= LUNA_ROOT + '../tools'
#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DNDEBUG -DLUNA_VERSION=\\\"' + GetEnv('LUNA_VERSION') +
    '\\\"')

#C编译参数.
#CFLAGS('-g -pipe -Wextra -Wall -Wno-parentheses -Wno-literal-suffix -Wno-unused-parameter -fPIC -pthread ')
CFLAGS('-g -O3 -pipe -Wextra -Wall -Wno-parentheses -Wno-literal-suffix -Wno-unused-parameter -fPIC -pthread ')

#C++编译参数.
#如果LD报dwarf版本错误，可以增加选项-gdwarf-2
#增加-Wno-unused-local-typedefs选项避免boost库报大量警告
#CXXFLAGS('-g -pipe -Wextra -Wall -Wno-parentheses -Wno-literal-suffix -Wno-unused-parameter -Wno-unused-local-typedefs -fPIC -pthread -std=c++11 -Wno-ignored-qualifiers ')
CXXFLAGS('-g -O3 -pipe -Wextra -Wall -Wno-parentheses -Wno-literal-suffix -Wno-unused-parameter -Wno-unused-local-typedefs -fPIC -pthread -std=c++11 -Wno-ignored-qualifiers -fopenmp ')

#CXX('mpic++')
#CC('mpicc')
#头文件路径.
#INCPATHS('. ' + GetEnv('LUNA_TOOLS') + '/include ')
INCPATHS('./ ../tools/include ../tools/include/eigen ../tools/include/common')

#使用库
#LIBS('libps.a')

#链接参数.  -ltcmalloc
#base_ldflags = ' -lunwind -pthread -lhiredis -lrclient -lrt -ldl -lutil -lnsl -lyaml-cpp ' \
#base_ldflags = ' -lunwind -ltcmalloc -pthread -lhiredis -lrclient -lrt -ldl -lutil -lnsl -lyaml-cpp ' \
base_ldflags = ' -lunwind -ltcmalloc_and_profiler -pthread -lhiredis -lrclient -lrt -ldl -lutil -lnsl -lyaml-cpp -fopenmp ' \
                + ' -ljsoncpp -lglog -lgflags -lboost_filesystem ' \
                + ' -lboost_python -lboost_system  -lboost_iostreams ' \
                + '-L' + ' ../tools/lib '
mpi_ldflags = '-lmpi_cxx -lmpi -lopen-rte -lopen-pal -Wl,--export-dynamic '
LDFLAGS(base_ldflags )
LDFLAGS(mpi_ldflags )

#ImportConfigsFrom('../')

user_sources=GLOB('*.cpp *.cc')
user_headers=GLOB('*.h')

Application('dfgbdt',
        Sources(GLOB('*.cpp ./external/*.cpp'), 
            ENV.CxxFlags())) 
#CxxFlags('-D_UAP_PROJECT_NAME_="\\\"BT_EXTRACTOR_COMMON_FILTER_HCE\\\""')))
#Libraries(HADOOP_ROOT + 'hadoop-core/output/libhce/lib/libhce.so'),
#        Libraries(HADOOP_ROOT + 'hadoop-core/output/libhdfs/libhdfs.so'),
#        Libraries(HADOOP_ROOT + 'java6/jre/lib/amd64/server/libjvm.so'))

